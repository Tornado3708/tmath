import Vector2D from "../Vector2D.js";
import { test } from "./tool.js";
const a = new Vector2D();
const b = new Vector2D(1, 2);
const samePosition = (a, b) => a.x === b.x && a.y === b.y;
const sameNumber = (a, b) => a === b;
test('Vector2D contructor empty')(samePosition)(a)({ x: 0, y: 0 });
test('Vector2D constructor num')(samePosition)(b)({ x: 1, y: 2 });
test('Vector2D constructor vec')(samePosition)(new Vector2D(b))(b);
test('Vector2D static add')(samePosition)(Vector2D.add(b, b))({ x: 2, y: 4 });
test('Vector2D static sub')(samePosition)(Vector2D.sub(new Vector2D(3, 5), b))({ x: 2, y: 3 });
test('Vector2D static hadamard')(samePosition)(Vector2D.hadamard(new Vector2D(3, 5), new Vector2D(3, 2)))({ x: 9, y: 10 });
test('Vector2D static mag')(sameNumber)(Vector2D.mag(b))(Math.sqrt(5));
test('Vector2D static yaw')(sameNumber)(Vector2D.yaw(b))(Math.atan2(2, 1));
test('Vector2D static scale')(samePosition)(Vector2D.scale(b, -2))({ x: -2, y: -4 });
test('Vector2D static unit')(samePosition)(Vector2D.unit(b))({ x: 1 / Math.sqrt(5), y: 2 / Math.sqrt(5) });
test('Vector2D static toArray')((a, b) => a[0] === b[0] && a[1] === b[1])(Vector2D.toArray(b))([1, 2]);
export default {};
